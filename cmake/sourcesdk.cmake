if(NOT SOURCESDK_DIR)
	message(FATAL_ERROR "SOURCESDK_DIR is empty")
endif()

if(CMAKE_SIZEOF_VOID_P EQUAL 8) # 64-bit
	set(SOURCESDK_COMPILE_DEFINITIONS
		${SOURCESDK_COMPILE_DEFINITIONS}

		PLATFORM_64BITS X64BITS
	)
else()
	set(SIZEOF_BITS ${CMAKE_SIZEOF_VOID_P})
	math(EXPR SIZEOF_BITS "${SIZEOF_BITS}*8")
	message(FATAL_ERROR "${SIZEOF_BITS}-bit platform is not supported")
endif()

set(SOURCESDK_PROTO_DIRS
	${SOURCESDK_PROTO_DIRS}
)

if(WINDOWS)
	set(SOURCESDK_COMPILE_DEFINITIONS
		${SOURCESDK_COMPILE_DEFINITIONS}

		_WIN32 WIN32
	)
elseif(LINUX)
	set(SOURCESDK_COMPILE_DEFINITIONS
		${SOURCESDK_COMPILE_DEFINITIONS}

		POSIX
		_LINUX LINUX

		_stricmp=strcasecmp stricmp=strcasecmp strcmpi=strcasecmp
		_strnicmp=strncasecmp strnicmp=strncasecmp
		_snprintf=snprintf _vsnprintf=vsnprintf
		_alloca=alloca 
	)
elseif(APPLE)
	set(SOURCESDK_COMPILE_DEFINITIONS
		${SOURCESDK_COMPILE_DEFINITIONS}

		POSIX
		OSX _OSX
	)
endif()

if(MSVC)
	set(SOURCESDK_COMPILE_DEFINITIONS
		${SOURCESDK_COMPILE_DEFINITIONS}

		COMPILER_MSVC COMPILER_MSVC64
	)
endif()

if(CMAKE_BUILD_TYPE STREQUAL "Debug")
	set(PLATFORM_COMPILE_DEFINITIONS
		${PLATFORM_COMPILE_DEFINITIONS}

		_DEBUG DEBUG
	)
endif()

set(SOURCESDK_INCLUDE_DIRS
	${SOURCESDK_INCLUDE_DIRS}
)

if(SOURCESDK_MALLOC_OVERRIDE)
	set(SOURCESDK_SOURCE_FILES
		${SOURCESDK_SOURCE_FILES}

		# memoverride.cpp is not usable on CMake Windows, because CMake default link libraries always link ucrt.lib
		${SOURCESDK_DIR}/public/tier0/memoverride.cpp
	)
endif()

set(SOURCESDK_LIB_DIR "${SOURCESDK_DIR}/lib")

set(SOURCESDK_LINK_LIBRARIES
	${SOURCESDK_LINK_LIBRARIES}
)

if(WINDOWS)
	set(SOURCESDK_PLATFORM_DIR "win64")
elseif(LINUX)
	set(SOURCESDK_PLATFORM_DIR "linuxsteamrt64")
elseif(APPLE)
	set(SOURCESDK_PLATFORM_DIR "osx64")
else()
	message(FATAL_ERROR "Unsupported platform")
endif()

set(SOURCESDK_LIB_PLATFORM_DIR "${SOURCESDK_LIB_DIR}/${SOURCESDK_PLATFORM_DIR}")

set(SOURCESDK_PATCHELF_EXE "patchelf${CMAKE_EXECUTABLE_SUFFIX}")
set(SOURCESDK_PATCHELF_EXECUTABLE "${DEVTOOLS_BIN_DIR}/${SOURCESDK_PLATFORM_DIR}/${SOURCESDK_PATCHELF_EXE}")

function(append_sourcesdk_shared_library VAR_NAME LIB_NAME)
	set(SOURCESDK_SHARED_LIBRARY_LIB_NAME "${CMAKE_SHARED_LIBRARY_PREFIX}${LIB_NAME}")

	if(WINDOWS)
		set(SOURCESDK_SHARED_LIBRARY_LIB "${SOURCESDK_SHARED_LIBRARY_LIB_NAME}${CMAKE_STATIC_LIBRARY_SUFFIX}")
	elseif(UNIX)
		set(SOURCESDK_SHARED_LIBRARY_LIB "${SOURCESDK_SHARED_LIBRARY_LIB_NAME}${CMAKE_SHARED_LIBRARY_SUFFIX}")
	else()
		message(FATAL_ERROR "Unsupported platform")
	endif()

	set(SOURCESDK_APPEND_SHARED_LIBRARY_LIB "${SOURCESDK_LIB_PLATFORM_DIR}/${SOURCESDK_SHARED_LIBRARY_LIB}")

	if(SOURCESDK_LINK_STRIP_CPP_EXPORTS AND LINUX)
		set(SOURCESDK_BINARY_SHARED_LIBRARY_LIB "${CMAKE_BINARY_DIR}/${SOURCESDK_SHARED_LIBRARY_LIB}")

		if(NOT EXISTS ${SOURCESDK_BINARY_SHARED_LIBRARY_LIB})
			configure_file(${SOURCESDK_APPEND_SHARED_LIBRARY_LIB} ${SOURCESDK_BINARY_SHARED_LIBRARY_LIB} COPYONLY)

			message(STATUS "Patching ${SOURCESDK_SHARED_LIBRARY_LIB} ...")
			execute_process(
				COMMAND bash -c "readelf -Ws --dyn-syms ${SOURCESDK_SHARED_LIBRARY_LIB} | awk '{print $8}' | grep -E '_ZS|_ZNS|_ZNKS|_ZN9__gnu_cxx|_ZNK9__gnu_cxx|_ZTIS|_ZTT|_ZTSS|_Zd|_Zn|_NSd|St[0-9]|Si[0-9]' | awk '{print substr($0, 3)}' | awk '{print \"_Z\" $0 \" XX\" $0}' >> ${SOURCESDK_SHARED_LIBRARY_LIB_NAME}.map && ${SOURCESDK_PATCHELF_EXECUTABLE} --output ${SOURCESDK_SHARED_LIBRARY_LIB} --rename-dynamic-symbols ${SOURCESDK_SHARED_LIBRARY_LIB_NAME}.map ${SOURCESDK_SHARED_LIBRARY_LIB}"
				WORKING_DIRECTORY ${CMAKE_BINARY_DIR}
			)
		endif()

		set(SOURCESDK_TARGET_SHARED_LIBRARY_LIB "${SOURCESDK_BINARY_SHARED_LIBRARY_LIB}")
	else()
		set(SOURCESDK_TARGET_SHARED_LIBRARY_LIB "${SOURCESDK_APPEND_SHARED_LIBRARY_LIB}")
	endif()

	set(${VAR_NAME}
		${${VAR_NAME}}

		${SOURCESDK_TARGET_SHARED_LIBRARY_LIB}
		PARENT_SCOPE
	)
endfunction()
