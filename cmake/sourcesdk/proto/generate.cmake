if(NOT SOURCESDK_DIR)
	message(FATAL_ERROR "SOURCESDK_DIR is empty")
endif()

if(NOT PROTOBUF_DIR)
	message(FATAL_ERROR "PROTOBUF_DIR is empty")
endif()

if(NOT SOURCESDK_PROTO_DIRS)
	message(FATAL_ERROR "SOURCESDK_PROTO_DIRS is empty")
endif()

if(NOT SOURCESDK_PROTO_FILENAMES)
	# message(WARNING "SOURCESDK_PROTO_FILENAMES is empty")

	return()
endif()

set(SOURCESDK_PROTO_ARGS
	${SOURCESDK_PROTO_ARGS}

	--proto_path=${SOURCESDK_PROTOBUF_SOURCE_DIR}
)

foreach(PROTO_DIR IN LISTS SOURCESDK_PROTO_DIRS)
	list(APPEND SOURCESDK_PROTO_ARGS
		--proto_path=${PROTO_DIR}
	)
endforeach()

set(SOURCESDK_CUSTOM_PROTO_ARGS
	${SOURCESDK_CUSTOM_PROTO_ARGS}

	--proto_path=${SOURCESDK_CUSTOM_PROTO_OUTPUT_DIR}
)

message(STATUS "To compile protos will be used ${SOURCESDK_PROTOC_EXECUTABLE}")

file(MAKE_DIRECTORY ${SOURCESDK_LOGS_PROTOS_DATE_DIRECTORY})
file(MAKE_DIRECTORY ${SOURCESDK_LOGS_PROTOS_DATE_ERRORS_DIRECTORY})

## Generate protobuf source & headers
foreach(PROTO_FILENAME IN LISTS SOURCESDK_PROTO_SOURCE_FILENAMES)
	if(SOURCESDK_PROTO_OUTPUT_DIR)
		set(PROTO_DIR "${SOURCESDK_PROTO_OUTPUT_DIR}")
	else()
		get_filename_component(PROTO_DIR "${PROTO_FILENAME}" DIRECTORY)
	endif()

	get_filename_component(PROTO "${PROTO_FILENAME}" NAME_WLE)
	set(PROTO_FILENAME_WITH_PATH "${PROTO_DIR}/${PROTO_FILENAME}")

	if(EXISTS "${PROTO_DIR}/${PROTO}.pb.cc")
		message(STATUS "Compiled ${PROTO_FILENAME} is exists")
	else()
		set(PROTO_OUTPUT_DATE_LOG_FILENAME "${SOURCESDK_LOGS_PROTOS_DATE_DIRECTORY}/${PROTO}.log")
		set(PROTO_ERRORS_DATE_LOG_FILENAME "${SOURCESDK_LOGS_PROTOS_DATE_ERRORS_DIRECTORY}/${PROTO}.log")

		message(STATUS "Compiling ${PROTO_FILENAME} ...")
		execute_process(
			OUTPUT_FILE ${PROTO_OUTPUT_DATE_LOG_FILENAME}
			ERROR_FILE ${PROTO_ERRORS_DATE_LOG_FILENAME}
			COMMAND ${SOURCESDK_PROTOC_EXECUTABLE} ${SOURCESDK_PROTO_ARGS} --cpp_out=${PROTO_DIR} ${PROTO_FILENAME}
			WORKING_DIRECTORY ${SOURCESDK_DIR}
		)
	endif()
endforeach()

foreach(PROTO_FILENAME IN LISTS SOURCESDK_CUSTOM_PROTO_SOURCE_FILENAMES)
	if(SOURCESDK_CUSTOM_PROTO_OUTPUT_DIR)
		set(PROTO_DIR "${SOURCESDK_CUSTOM_PROTO_OUTPUT_DIR}")
	else()
		get_filename_component(PROTO_DIR "${PROTO_FILENAME}" DIRECTORY)
	endif()

	get_filename_component(PROTO "${PROTO_FILENAME}" NAME_WLE)
	set(PROTO_FILENAME_WITH_PATH "${PROTO_DIR}/${PROTO_FILENAME}")

	if(EXISTS "${PROTO_DIR}/${PROTO}.pb.cc")
		message(STATUS "Compiled custom ${PROTO_FILENAME} is exists")
	else()
		set(PROTO_OUTPUT_DATE_LOG_FILENAME "${SOURCESDK_LOGS_PROTOS_DATE_DIRECTORY}/${PROTO}.log")
		set(PROTO_ERRORS_DATE_LOG_FILENAME "${SOURCESDK_LOGS_PROTOS_DATE_ERRORS_DIRECTORY}/${PROTO}.log")

		message(STATUS "Compiling custom ${PROTO_FILENAME} ...")
		execute_process(
			OUTPUT_FILE ${PROTO_OUTPUT_DATE_LOG_FILENAME}
			ERROR_FILE ${PROTO_ERRORS_DATE_LOG_FILENAME}
			COMMAND ${SOURCESDK_PROTOC_EXECUTABLE} ${SOURCESDK_CUSTOM_PROTO_ARGS} --cpp_out=${PROTO_DIR} ${PROTO_FILENAME}
			WORKING_DIRECTORY ${SOURCESDK_DIR}
		)
	endif()
endforeach()
