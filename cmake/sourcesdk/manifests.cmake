if(NOT SOURCESDK_GAME_TARGET)
	message(FATAL_ERROR "SOURCESDK_GAME_TARGET is empty")
endif()

if(NOT PROTOBUF_DIR)
	message(FATAL_ERROR "PROTOBUF_DIR is empty")
endif()

set(SOURCESDK_GAME_DATA_KEYS_ROOT_GAME_NAME_KEY "name")
set(SOURCESDK_GAME_DATA_KEYS_ROOT_GAME_DIR_KEY "game_dir")
set(SOURCESDK_GAME_DATA_KEYS_ROOT_INHERITS_KEY "inherits")
set(SOURCESDK_GAME_DATA_KEYS_ROOT_GAME_PROTOBUFS_DIR "protobufs_dir")
set(SOURCESDK_GAME_DATA_KEYS_ROOT_GAME_DEFINES_KEY "defines")

function(sourcesdk_parse_game_manifests
	CONTENT
	TARGET
	INHERITS_KEY
	NAME_KEY
	DIR_KEY
	PROTOBUFS_DIR_KEY
	DEFINES_KEY

	NAME_VAR
	DIR_VAR
	PROTOBUFS_DIR_VAR
	DEFINES_VAR
)
	set(INHERIT_DEFINES)
	string(FIND ${CONTENT} "${TARGET}" TARGET_POSITION)

	if(TARGET_POSITION EQUAL -1)
		message(FATAL_ERROR "Target game \"${TARGET}\" could not be found in the manifests. See CMakeGameManifests.json")

		return()
	endif()

	string(JSON TARGET_CONTENT GET ${CONTENT} "${TARGET}")

	# "inherits"
	function(extract_inherits INPUT RESULT_VAR)
		set(RESULT ${INPUT})

		# string(REGEX REPLACE "\\[|\\]|\"|\\s" "" RESULT ${RESULT})
		string(REPLACE "[" "" RESULT ${RESULT})
		string(REPLACE "]" "" RESULT ${RESULT})
		string(REPLACE "\"" "" RESULT ${RESULT})
		string(REPLACE " " "" RESULT ${RESULT})

		string(REPLACE "," ";" RESULT ${RESULT}) # Split to array.

		set(${RESULT_VAR} ${RESULT} PARENT_SCOPE)
	endfunction()

	string(FIND ${TARGET_CONTENT} "${INHERITS_KEY}" INHERITS_KEY_POSITION)

	if(NOT INHERITS_KEY_POSITION EQUAL -1) # If exists "inherits"
		string(JSON INHERITS_ARRAY_CONTENT GET ${TARGET_CONTENT} "${INHERITS_KEY}")

		set(INHERITS_LIST)
		extract_inherits(${INHERITS_ARRAY_CONTENT} INHERITS_LIST)

		set(INHERIT_NAME)
		set(INHERIT_DIR)
		set(INHERIT_PROTOBUFS_DIR)

		foreach(INHERIT_TARGET IN LISTS INHERITS_LIST)
			message(STATUS "\t└── Configure \"${INHERIT_TARGET}\" inherit game")

			sourcesdk_parse_game_manifests(
				${CONTENT}
				${INHERIT_TARGET}
				${INHERITS_KEY}
				${NAME_KEY}
				${DIR_KEY}
				${PROTOBUFS_DIR_KEY}
				${DEFINES_KEY}

				INHERIT_NAME
				INHERIT_DIR
				INHERIT_PROTOBUFS_DIR
				INHERIT_DEFINES
			)
		endforeach()

		set(${NAME_VAR} ${INHERIT_NAME} PARENT_SCOPE)
		set(${DIR_VAR} ${INHERIT_DIR} PARENT_SCOPE)
		set(${PROTOBUFS_DIR_VAR} ${INHERIT_PROTOBUFS_DIR} PARENT_SCOPE)
		set(${DEFINES_VAR} ${INHERIT_DEFINES} PARENT_SCOPE)
	endif()

	# "name"
	string(JSON NAME GET ${TARGET_CONTENT} "${NAME_KEY}")
	set(${NAME_VAR} ${NAME} PARENT_SCOPE)

	# "dir"
	string(FIND ${TARGET_CONTENT} "${DIR_KEY}" DIR_KEY_POSITION)

	if(NOT DIR_KEY_POSITION EQUAL -1)
		string(JSON DIR GET ${TARGET_CONTENT} "${DIR_KEY}")
		set(${DIR_VAR} ${DIR} PARENT_SCOPE)
	endif()

	# "protobuf_dir"
	string(FIND ${TARGET_CONTENT} "${PROTOBUFS_DIR_KEY}" PROTOBUFS_DIR_POSITION)

	if(NOT PROTOBUFS_DIR_POSITION EQUAL -1)
		string(JSON PROTOBUFS_DIR GET ${TARGET_CONTENT} "${PROTOBUFS_DIR_KEY}")
		set(${PROTOBUFS_DIR_VAR} ${PROTOBUFS_DIR} PARENT_SCOPE)
	endif()

	# "defines"
	string(JSON DEFINES_OBJECT_CONTENT GET ${TARGET_CONTENT} "${DEFINES_KEY}")

	function(extract_defines CONTENT RESULT_VAR)
		set(RESULT)

		string(REGEX MATCHALL "\"([^\"]+)\" :" DIRTY_KEYS ${CONTENT})
		string(REGEX MATCHALL ": (null|[0-9]+)" DIRTY_VALUES ${CONTENT})

		function(clean_dirty INPUT RESULT_VAR)
			set(RESULT ${INPUT})

			# string(REGEX REPLACE "\"|\\s|:|\\s" "" RESULT ${INPUT})
			string(REPLACE "\"" "" RESULT ${RESULT})
			string(REPLACE ":" "" RESULT ${RESULT})
			string(REPLACE " " "" RESULT ${RESULT})
			set(${RESULT_VAR} ${RESULT} PARENT_SCOPE)
		endfunction()

		list(LENGTH DIRTY_KEYS DIRTY_LENGTH)

		foreach(IDX RANGE 1 ${DIRTY_LENGTH})
			math(EXPR IDX_LOW "${IDX} - 1")

			list(GET DIRTY_KEYS ${IDX_LOW} DIRTY_KEY)
			set(KEY)
			clean_dirty(${DIRTY_KEY} KEY)

			list(GET DIRTY_VALUES ${IDX_LOW} DIRTY_VALUE)
			set(VALUE)
			clean_dirty(${DIRTY_VALUE} VALUE)

			if(${VALUE} STREQUAL "null")
				list(APPEND RESULT "${KEY}")
			else()
				list(APPEND RESULT "${KEY}=${VALUE}")
			endif()
		endforeach()

		set(${RESULT_VAR} ${RESULT} PARENT_SCOPE)
	endfunction()

	set(DEFINES_RESULT)
	extract_defines(${DEFINES_OBJECT_CONTENT} DEFINES_RESULT)
	set(${DEFINES_VAR} ${INHERIT_DEFINES} ${DEFINES_RESULT} PARENT_SCOPE)
endfunction()

set(SOURCESDK_MANIFESTS_GAME_NAME)
set(SOURCESDK_MANIFESTS_GAME_DIR)
set(SOURCESDK_MANIFESTS_GAME_PROTO_DIR)
set(SOURCESDK_MANIFESTS_GAME_DEFINES)

message(STATUS "Configure \"${SOURCESDK_GAME_TARGET}\" manifest")

set(SOURCESDK_MANIFESTS_FILENAME "${CMAKE_CURRENT_SOURCE_DIR}/CMakeGameManifests.json")
file(READ "${SOURCESDK_MANIFESTS_FILENAME}" SOURCESDK_MANIFESTS_CONTENT)

sourcesdk_parse_game_manifests(
	${SOURCESDK_MANIFESTS_CONTENT}
	${SOURCESDK_GAME_TARGET}
	${SOURCESDK_GAME_DATA_KEYS_ROOT_INHERITS_KEY}
	${SOURCESDK_GAME_DATA_KEYS_ROOT_GAME_NAME_KEY}
	${SOURCESDK_GAME_DATA_KEYS_ROOT_GAME_DIR_KEY}
	${SOURCESDK_GAME_DATA_KEYS_ROOT_GAME_PROTOBUFS_DIR}
	${SOURCESDK_GAME_DATA_KEYS_ROOT_GAME_DEFINES_KEY}

	SOURCESDK_MANIFESTS_GAME_NAME
	SOURCESDK_MANIFESTS_GAME_DIR
	SOURCESDK_MANIFESTS_GAME_PROTO_DIR
	SOURCESDK_MANIFESTS_GAME_DEFINES
)

list(APPEND SOURCESDK_COMPILE_DEFINITIONS
	SE_NAME="${SOURCESDK_MANIFESTS_GAME_NAME}"
	SE_GAME_DIR="${SOURCESDK_MANIFESTS_GAME_DIR}"

	${SOURCESDK_MANIFESTS_GAME_DEFINES}
)
